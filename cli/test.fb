/*
let test_ifs a b : bool -> bool -> int32 =
    if a then
        print_str "a\n";
    else if b then
        print_str "b\n";
    else
        print_str "neither\n";
    return 0;

let test_ifexpr a b : bool -> bool -> int32 = if a then 
        0 
    else if b then
        1 
    else if true then 
        let x : int32 = 2;
        x
    else if a == b then
        3
    else
        4

extern "C" let externed : int32 -> int32;
*/
let f (a:[int32;5]) = ();
/*
let show_short_curicuit _ : () -> () =
    if (show_something ()) && (show_something_else ()) then
        print_str "this is a seperator\n";
    if (show_something ()) || (show_something_else ()) then
        print_str "another seperator\n";
    if (show_something_else ()) || (show_something ()) then
        print_str "yet another seperator\n";
    return ();

let show_something _ : () -> bool =
    print_str "hello there\n";
    return true;

let show_something_else _ : () -> bool =
    print_str "general kenobi\n";
    return false;
*/
let test (a:(int32,int32)) = 
    let x : int32 = 0;
    return x;

let main _ : () -> () =
    // let a : bool = true;
    // let x : int32 = 0;
    // match x where
    // | 1 -> print_str "one",
    // | 2 -> print_str "two",
    // print_str "main";
    // show_short_curicuit ();
    // let y = externed 0;
    f [1,2,3,4,5];
    test (1,2);
    return ();