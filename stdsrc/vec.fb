for<T> public type Vec = {
    start : *mut T,
    count : usize,
    capacity : usize,
}

for<T> public let fn Vec::new : () -> Vec<T> = Vec { start:nullptr, count:0, capacity:0}

for<T> public let Vec::push &mut self it : &mut Vec<T> -> T -> ()
    todo

public let Vec::len &self = self.count

public let Vec::capacity &self = self.capacity

for<T> public let !! &vec idx : &Vec<T> -> usize -> &T = 
    if idx > self.count then error "index out of bounds"
    unsafe 
        &*std::ptr::offset vec.start idx

for<T> public let Vec::mut_idx &mut self idx : &mut Vec<T> -> usize -> &mut T =
    if idx > self.count then error "index out of bounds"
    unsafe 
        &mut *std::ptr::offset vec.start idx
    

let from_seq_impl (mut v) (mut s)=
    match s.next
    | None -> v
    | Some t -> 
        v.push t;
        from_seq_impl v s

for<T> implement seq::FromSeq<T> for Vec<T> =
    let from_seq s = from_seq_impl Vec::new s
        